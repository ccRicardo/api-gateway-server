本文件主要是对该api网关系统的各个模块以及它们的业务流程做一个简单的总结

一、整体流程
该网关系统的整体运行流程体现在Bootstrap类中，具体描述如下：
（一）加载本地的静态配置信息。
配置加载的优先级是：运行参数 > jvm参数 > 系统环境变量 > 配置文件 > 默认值
（二）初始化配置中心
先通过spi机制来创建配置中心的实例，然后调用init方法完成初始化。最后，传入一个RulesChangeListener实例，订阅规则的变更。
（三）启动网关核心容器
核心容器封装了网关系统的三个核心通信类：NettyHttpServer，NettyProcessor和NettyHttpClient。
这三个类的启动又会实例化其他的核心功能类。因此，网关系统中的绝大部分核心功能类都是在这个阶段完成实例化的。
（四）初始化注册中心
先通过spi机制来创建注册中心的实例，然后将api网关服务也注册到注册中心。最后，传入一个RegisterCenterListener实例，订阅所有的服务。
（五）服务优雅关机
在网关系统关闭之前，在注册中心中注销掉网关服务。

二、模块详情
该系统可以分为五个模块：通信模块，过滤组件模块，客户端（服务接入）模块，注册配置模块，以及云原生模块（实现中）
（一）通信模块

Q：服务端中BIO的缺点，NIO的优点
A：BIO是一个线程负责处理一个连接。在连接释放之前，该线程不能处理其他连接的请求。
因此，即使该连接处于空闲状态，没有任何事件发生，线程仍然需要阻塞等待，直到发生事件，或者达到空闲超时时间，服务端自动释放连接资源。
可见，这种方式会导致服务端的线程资源在大部分时候都处于空闲等待状态，无法充分利用服务器的硬件资源。
此外，在面临高并发场景，连接数量比较多的情况，很容易出现线程池耗尽，导致大量请求来不及处理就丢失了。
NIO则是通过一个selector来管理多个channel上的IO事件，即实现一个线程处理多个连接的请求。
selector会轮询每个channel。当其中某个channel上发生IO事件时，selector便会定位到该channel，并调用相应的channel pipeline处理该IO事件。
（需要注意的是，在netty中，selector会和一个装有非IO任务的任务队列绑定，封装成一个event loop）
这种方式充分利用了服务端的线程资源，使之能够同时管理大量的连接对象，提高了系统的抗压能力和可用性。

1、服务端（请求接入）
服务端的主要作用是监听端口，接收客户端的请求。
服务端的主要类是NettyHttpServer，其本质就是配置并启动netty服务端的引导程序ServerBootstrap
netty服务端的启动过程和接收请求过程在这里就不再赘述，可以参考相关的源码解析
channel pipeline上的Handler其实都属于处理端

2、处理端（请求处理）
处理端的主要作用是解析请求。
首先，handler将请求的包装对象放入缓冲队列。
然后再从缓冲队列中取出包装对象进行解析，构建相应的网关上下文，请求和响应对象，再交给过滤组件链进行处理。
处理端的主要类及其作用如下：
HttpServerCodec：解析http GET请求
HttpObjectAggregator：解析http POST请求，并将分块的请求体聚合成一个完整的http请求
NettyServerConnectManagerHandler：定义了channel在各种事件发生时应该进行的操作（主要是打印日志）
NettyHttpServerHandler：构造请求的包装类对象，并交给请求处理器进行处理
NettyCoreProcessor：请求处理器的基本实现，主要作用是构造上下文对象，交给过滤组件链处理，并进行异常处理
DisruptorNettyCoreProcessor：在基本实现上加了缓冲队列。其核心过程如下：
NettyHttpServerHandler将包装类对象放入队列（生产者）。NettyCoreProcessor从中取出包装类对象进行处理（消费者）

3、客户端（服务调用）
客户端的主要作用是进行请求转发/服务调用，并返回响应结果。
（
目前，客户端只支持发送http请求，调用http后台服务，暂不支持RPC泛化调用。理由大致如下：
http协议更加简单通用，并且功能丰富，对服务的提供方和调用方没有过多的技术限定，自由灵活。
而且实习团队中的物联网业务实际上是ai加物联网，而ai模型通常都是提供的restful接口。
而RPC的典型特点是速度快，性能好。但是物联网业务对于高并发，高性能的需求并没有互联网那么大，所以不是一定要使用
）
客户端的主要类就是NettyHttpClient，其本质就是对AsyncHttpClient的封装。
AsyncHttpClient能够异步地发送和接收http请求（即单独创建一个工作线程来负责请求的发送和接收，而不阻塞网关主线程的运行。）
todo 对于AsyncHttpClient的异步原理，目前还只是猜测性质的理解，因此下面的总结不一定正确
当某个请求的响应数据返回后，相应的工作线程（也就是发送该请求的工作线程）就会接收结果，并调用预设好的异步回调函数，完成处理操作。
（注意：
* 上述过程是单异步的情况。如果是双异步，则会存在两个工作线程，一个负责发送请求，另一个负责接收其接收响应，这会导致线程上下文切换更加频繁，效率可能反而更低。
* 异步并不能缩短后台服务的响应/处理时间，实际上，它提升的是整个网关系统的吞吐量
）
AsyncHttpClient的实现类是DefaultAsyncHttpClient，其主要类和作用如下：
AsyncHttpClientConfig：配置类
ChannelManager：管理channel池，并负责创建客户端的bootstrap等
NettyRequestSender：发送http异步请求

（二）过滤组件模块：
过滤器的类型可以分为前置pre，路由route，后置post和异常error。
前置：位于路由过滤器之前，负责对网关上下文进行处理，是数量最多，最主要的过滤器类型。
路由：有且只有一个，负责路由转发和接收响应。
异常：当前置或路由过滤器中出现异常时才执行，位于后置过滤器之前，负责异常处理，并写回异常响应。
后置：位于路由过滤器之后，负责一些统计分析方面的工作（通常不涉及响应内容的修改）。
该模块的整体执行流程就是：先顺序执行所有的前置过滤器，然后执行路由过滤器。
路由过滤器接收到响应后，会先将其写回到客户端，然后再顺序执行所有的后置过滤器。
如果在执行前置或者路由过滤器（不包括complete方法）的过程中出现异常，那么就会执行异常过滤器。
异常过滤器也会先将异常响应写回到客户端，然后再执行后置过滤器。
若后置过滤器执行异常，则仅做一些简单的日志打印和异常记录工作，不再进行过多的处理。

1、过滤组件链工厂
过滤组件链工厂类的主要作用是通过spi机制加载各组件的实例，然后根据上下文中携带的规则配置，构建相应的过滤器链实例。
过滤组件链工厂类的主要类是FilterChainFactory，AbstractFilterChainFactory和GatewayFilterChainFactory

2、用户鉴权
用户鉴权的主要作用是从请求中获取jwt cookie，然后解析出相应的用户信息（即用户id）
用户鉴权的主要类是UserAuthFilter
该类使用了Jwts库

3、流量控制/限流
流量控制的主要作用是在限制一段时间内的最大访问次数
流量控制的策略/类型分为两种：仅对方法调用的路径限流，和对整个服务进行限流
流量控制的模式也分为两种：如果使用单机网关系统，则通过Guava库实现单机限流器；如果使用集群网关系统，则通过redis实现分布式限流器。
流量控制的主要类及其作用如下：
FlowCtrlFilter：根据限流类型，确定限流对象的值，然后调用限流执行器
FlowCtrlExecutor: 限流执行器，会根据限流的模式，调用相应的限流器，完成限流工作
GuavaCountLimiter：基于Guava库中的RateLimiter实现的单机版限流器
RedisCountLimiter：通过在redis中运行指定的lua脚本来实现的分布式限流器

4、灰度分流
灰度分流的主要作用是对访问流量进行分流，在部分流量中打上灰度标签，使其访问灰度服务实例。
灰度分流的策略分为两种：基于http请求头中携带的灰度标记（主要用于测试人员测试灰度服务），和基于客户端ip进行分流。
灰度分流的主要类是GrayFilter

todo 过滤器部分目前还没实现完
5、负载均衡
负载均衡的主要作用是根据指定的均衡策略，从匹配的服务实例集合中选择一个服务实例，作为后续真正的服务调用对象。
负载均衡策略：随机
负载均衡的主要类及其作用如下：
LoadBalanceFilter：根据传入的负载均衡配置信息，调用相应的负载均衡策略实例，从匹配的服务实例集合中选择一个，并将其地址设置为最终的访问目标
LoadBalance：顶级接口
AbstractLoadBalance：提供了预热权重的计算
RandomLoadBalanceRule：随机负载均衡
LoadBalanceFactory：负载均衡工厂类，负责生产（实际上是从集合中获取）指定负载均衡策略的实例

6、路由
路由的主要作用是通过AsyncHttpClient异步发送请求和接收响应，并使用complete方法对响应结果进行处理。
路由部分可以启用hystrix进行熔断降级，但是必须阻塞等待请求的响应结果。
路由的主要类是RouterFilter

7、异常处理
异常处理的主要作用是检查上下文中的异常信息，并向客户端写回相应的响应
注意：只有当前置和路由（不包括complete方法）执行异常时，才会调用异常处理过滤器来写回响应
异常处理的主要类是DefaultErrorFilter

8、

（三）服务接入/客户端模块
Q：为什么需要开发一个客户端模块，为什么只开发了spring boot的客户端模块？
A：为了使后台服务能够更加方便，简洁地使用该网关系统，需要开发一套可以实现自动配置，自动扫描和自动注册的客户端模块。
虽然后台服务使用的web框架可能并不一致，但是对应的客户端模块的整体设计思路，软件架构和实现流程是非常相似的。
因此，此处以web框架中占比最大的spring boot为例，开发了一套针对spring boot应用的客户端系统，其他web框架客户端均可以此为参考，就不再赘述。

客户端模块的完整工作流程：
在实际应用中，客户端模块会作为外部依赖被使用该网关系统的spring boot后台/下游服务所引入。
在spring boot应用中，@SpringBootApplication会开启自动装配机制，扫描resources/META-INF/spring.factories文件，将其中配置的ApiClientAutoConfiguration类注册到ioc容器中。
由于该类使用了@EnableConfigurationProperties(ApiProperties.class)，所以会将application.properties中以api开头的属性值绑定到ApiProperties相应字段中，并注册Bean实例。
此外，由于该类还使用了@Configuration，所以@Bean修饰的HttpClientRegisterManager方法也会注册到ioc容器中。
当spring boot应用启动时，便会发布ApplicationStartedEvent事件，调用HttpClientRegisterManager中的onApplicationEvent方法（过程中还会调用ApiAnnotationScanner），完成服务注册。

1、自动配置
自动配置的主要作用是利用spring boot的自动装配机制，注册ApiProperties和HttpClientRegisterManager的bean实例。
自动配置的主要类是ApiClientAutoConfiguration

2、注解扫描
注解扫描的主要作用是扫描类/方法上的@ApiService/@ApiInvoker注解，然后构建相应的服务定义实例。
注解扫描的主要类是ApiAnnotationScanner

3、自动注册
自动注册的主要作用是在spring boot服务启动时，将该服务自动注册到注册中心。
自动注册的主要类是HttpClientRegisterManager

（四）配置和注册模块
配置中心和注册中心都是基于nacos实现的，因为其提供了简洁方便的可视化操作界面。

1、配置中心
配置中心的主要作用是存储网关系统的动态规则配置。
当规则配置发生变更时，便会调用RulesChangeListener监听器实例，传递更新后的规则配置信息。
配置中心的主要类是NacosConfigCenter

2、注册中心
注册中心的主要作用是完成服务的注册，注销和订阅
其中，订阅指的是监控服务变更。当注册新服务，或者增/减服务实例时，便会调用RegisterCenterListener，传递最新的服务定义和服务实例集合。
注册中心的主要类是NacosRegisterCenter

（五）云原生模块
云原生模块的主要工作是通过使用各种工具/技术，并进行相应配置，来将网关应用部署到云平台，并且对其进行管理和各种功能增强。
具体来说，涉及到的技术主要有：
使用docker对网关应用进行容器化部署，实现应用的敏捷部署和高移植性。
使用k8s管理和调度网关应用容器，实现了应用的滚动更新，回滚和弹性伸缩功能。
使用prometheus，grafana监控并展示应用容器及相关资源的各项数据指标，提高了应用的可观测性。
使用filebeat，logstash，elasticsearch和kibana构建了一个日志收集平台，
用于汇总并展示网关应用以及相关k8s资源的日志信息，提高了应用的可观测性。

1、滚动更新和回滚
滚动更新指的是不停机的渐进式更新，即一次仅更新一批容器，当更新的容器就绪后，再更新另一批，直到全部更新完成。
回滚指的是后台保存了一定数量的容器修改记录，因此容器可以随时回退到指定的某个历史版本。
这部分功能主要是使用了docker和k8s的deployment。
具体来说，首先需要将网关应用打包成docker镜像，并上传到私有/本地仓库，然后配置deployment文件。

2、弹性伸缩
弹性伸缩指的是k8s可以通过查询网关应用的qps指标数据，来动态调整网关应用容器的数量。
这部分功能的实现过程比较复杂，具体如下：
网关系统内部埋点->创建ServiceMonitor->创建APIService->配置Prometheus Adapter->创建hpa

3、监控
监控指的是使用prometheus对网关应用容器的网络状况和硬件资源使用情况进行监控，并使用grafana进行可视化观测。
这部分功能可以具体介绍一下prometheus和grafana在k8s上的各种配置。

4、日志收集
日志收集指的是使用ELK技术栈构建一个日志收集平台，对网关应用及相关k8s资源的日志信息进行收集，持久化，展示和管理。
这部分功能可以具体介绍一下日志收集平台四个组件的作用和各种配置。


