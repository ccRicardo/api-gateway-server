一、Docker部署：
1、制作镜像
gateway-server和gateway-backend部分，需要将jar包与对应Dockerfile放在同一目录下，然后通过docker build -t xxx . 命令即可制作相应镜像。
Nacos-server部分，只需切换到对应Dockerfile所在目录，然后运行上述命令即可制作镜像。Dockerfile中，主要是在官方v1.4.4基础上，通过命令创建了/home/nacos/init.d目录，以及在/home/nacos/conf/application.properties中将server.tomcat.basedir属性注释掉。
2、运行命令
推荐使用host网络，这样就不必修改gateway-server和gateway-backend的配置。命令如下：
docker run -it --name=xxx --net=host xxx 
如果是nacos-server，需要设置环境变量：-e MODE=standalone
如果使用bridge网络，需要设置端口映射，并且gateway-server和gateway-backend还需要通过环境变量的方式设置注册/配置中心的地址。

二、K8s部署：
1、上传镜像
使用docker save将镜像打包成tar文件，然后通过xftp传到其他节点/主机上，再使用docker load将其上传到本地镜像仓库。
注意：k8s每个node节点的本地镜像仓库都应该包含my-nacos-server，my-gateway-server和my-gateway-backend镜像。
2、编写service yaml
3、编写deployment yaml
4、创建相应资源对象
先创建service对象，然后通过命令kubectl get svc获取nacos-server-service的clusterIP和port
修改gateway-server和gateway-backend的deployment yaml文件，将环境变量中的注册和配置中心地址改为clusterIP:port，然后创建deployment对象

三、弹性伸缩（根据gateway-server的qps指标来控制其pod的数量）
1、暴露指标查询接口
gateway-server需要提供一个接口供prometheus拉取指标数据。
在网关内部，通过统计后置过滤器，收集指标数据，并暴露一个rest api供prometheus进行数据拉取
然后在k8s deployment和service中暴露相关端口。
2、通过kube-prometheus部署prometheus应用
从github下载kube-prometheus-release-0.10.zip，解压后依次运行两条命令，完成prometheus启动
（kube-prometheus的详细部署步骤可以参考b站视频）
3、配置ServiceMonitor
创建ServiceMonitor，引导prometheus从gateway-server-service暴露的prometheus-pull-port端口中拉取数据。
修改prometheus-clusterRole.yaml，配置rbac权限。
通过prometheus web的status->targets页面可以判断prometheus拉取数据是否成功
4、配置prometheus adapter
prometheus adapter的作用是取代k8s自带的metrics server，来给hpa提供指标数据。
首先需要修改prometheusAdapter-apiService.yaml，增加一个用于拉取自定义指标的APIService配置
然后修改prometheusAdapter-configMap.yaml，配置相应的rules，将prometheus监控数据映射为一个k8s监控指标（即网关应用的qps）。
修改配置文件后，注意使用kubectl apply命令更新，并且通过kubectl rollout restart重启prometheus adapter
通过kubectl get --raw /apis/custom.metrics.k8s.io/v1beta1，可以判断k8s获取自定义指标是否成功
5、配置hpa
在prometheus web或者grafana界面通过sum(irate(gateway_request_seconds_count[1m])) by (pod)可以查看扩容过程

四、总结：
可以将二，三中涉及的所有资源配置文件放到一个目录下，然后创建相应的namespace.yaml文件
这样就可以切换到该目录下，使用kubectl apply -f ./ 命令一键启动整个网关系统。
不过，资源的创建是有顺序的：需要先创建命名空间，再创建my-nacos-server-service，然后修改deployment环境变量中的注册和配置中心地址，最后创建剩余资源。
注意：在创建my-nacos-server的deployment资源之前，需要在各node的主机挂载目录中事先准备好数据，也就是my-nacos-server容器中/home/nacos/data下的内容


五、ELK日志收集平台
1、给节点打标签
需要通过命令kubectl label node xxx es=data，事先给各个节点打上es=data标签
2、配置filebeat
filebeat通过DaemonSet方式部署到了集群的每个节点上，用于收集该节点的日志信息，然后推送给logstash
3、配置logstash
logstash的作用是对filebeat推送的日志信息进行汇总和清洗过滤，然后推送给es数据库
4、配置elasticsearch
es数据库的作用是持久化日志信息，并提供强大的检索功能
5、配置kibana
kibana的作用是对日志信息进行可视化展示和管理
6、启动ELK日志收集平台
将上述四个组件的配置文件放到一个目录下，并创建相应的namespace.yaml文件
切换到该目录，使用kubectl apply -f ./ 命令即可启动整个ELK日志收集平台。

六、补充说明
1、从外部访问nacos，Prometheus，grafana或者kibana，需要查看对应service的port。
注意：有些服务只给出ip:port是访问不到的，需要加上路径。例如访问nacos，则需要加上/nacos
2、如果使用kubectl get查不到某个资源，很可能是该资源不在default命名空间内，需要加上-n xxx或--namespace=xxx
例如，网关系统相关资源在api-gateway，Prometheus相关资源在monitoring，而elk相关资源在kube-logging



